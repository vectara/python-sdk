# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Prompt(UniversalBaseModel):
    """
    A prompt that can be used with a LLM. A prompt is the template that is used to render
    the text sent to the LLM. It also contains various default model settings such as
    temperature.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the prompt.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the prompt. This is used as the `prompt_name` in a query.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the prompt.
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the prompt is enabled.
    """

    default: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates if this prompt is the default prompt used with the LLM.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
